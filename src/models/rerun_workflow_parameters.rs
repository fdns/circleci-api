/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

/// RerunWorkflowParameters : The information you can supply when rerunning a workflow.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RerunWorkflowParameters {
    /// Whether to enable SSH access for the triggering user on the newly-rerun job. Requires the jobs parameter to be used and so is mutually exclusive with the from_failed parameter.
    #[serde(rename = "enable_ssh", skip_serializing_if = "Option::is_none")]
    pub enable_ssh: Option<bool>,
    /// Whether to rerun the workflow from the failed job. Mutually exclusive with the jobs parameter.
    #[serde(rename = "from_failed", skip_serializing_if = "Option::is_none")]
    pub from_failed: Option<bool>,
    /// A list of job IDs to rerun.
    #[serde(rename = "jobs", skip_serializing_if = "Option::is_none")]
    pub jobs: Option<Vec<uuid::Uuid>>,
    /// Completes rerun using sparse trees logic, an optimization for workflows that have disconnected subgraphs. Requires jobs parameter and so is mutually exclusive with the from_failed parameter.
    #[serde(rename = "sparse_tree", skip_serializing_if = "Option::is_none")]
    pub sparse_tree: Option<bool>,
}

impl RerunWorkflowParameters {
    /// The information you can supply when rerunning a workflow.
    pub fn new() -> RerunWorkflowParameters {
        RerunWorkflowParameters {
            enable_ssh: None,
            from_failed: None,
            jobs: None,
            sparse_tree: None,
        }
    }
}

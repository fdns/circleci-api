/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

/// UpdateWebhookRequest : The parameters for an update webhook request

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateWebhookRequest {
    /// Name of the webhook
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Events that will trigger the webhook
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<Events>>,
    /// URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Secret used to build an HMAC hash of the payload and passed as a header in the webhook request
    #[serde(rename = "signing-secret", skip_serializing_if = "Option::is_none")]
    pub signing_secret: Option<String>,
    /// Whether to enforce TLS certificate verification when delivering the webhook
    #[serde(rename = "verify-tls", skip_serializing_if = "Option::is_none")]
    pub verify_tls: Option<bool>,
}

impl UpdateWebhookRequest {
    /// The parameters for an update webhook request
    pub fn new() -> UpdateWebhookRequest {
        UpdateWebhookRequest {
            name: None,
            events: None,
            url: None,
            signing_secret: None,
            verify_tls: None,
        }
    }
}

/// Events that will trigger the webhook
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Events {
    #[serde(rename = "workflow-completed")]
    WorkflowCompleted,
    #[serde(rename = "job-completed")]
    JobCompleted,
}

impl Default for Events {
    fn default() -> Events {
        Self::WorkflowCompleted
    }
}

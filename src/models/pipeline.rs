/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

/// Pipeline : A pipeline response.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Pipeline {
    /// The unique ID of the pipeline.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// A sequence of errors that have occurred within the pipeline.
    #[serde(rename = "errors")]
    pub errors: Vec<crate::models::PipelineErrorsInner>,
    /// The project-slug for the pipeline.
    #[serde(rename = "project_slug")]
    pub project_slug: String,
    /// The date and time the pipeline was last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// The number of the pipeline.
    #[serde(rename = "number")]
    pub number: i64,
    #[serde(rename = "trigger_parameters", skip_serializing_if = "Option::is_none")]
    pub trigger_parameters:
        Option<::std::collections::HashMap<String, crate::models::PipelineTriggerParametersValue>>,
    /// The current state of the pipeline.
    #[serde(rename = "state")]
    pub state: State,
    /// The date and time the pipeline was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "trigger")]
    pub trigger: Box<crate::models::PipelineTrigger>,
    #[serde(rename = "vcs", skip_serializing_if = "Option::is_none")]
    pub vcs: Option<Box<crate::models::PipelineVcs>>,
}

impl Pipeline {
    /// A pipeline response.
    pub fn new(
        id: uuid::Uuid,
        errors: Vec<crate::models::PipelineErrorsInner>,
        project_slug: String,
        number: i64,
        state: State,
        created_at: String,
        trigger: crate::models::PipelineTrigger,
    ) -> Pipeline {
        Pipeline {
            id,
            errors,
            project_slug,
            updated_at: None,
            number,
            trigger_parameters: None,
            state,
            created_at,
            trigger: Box::new(trigger),
            vcs: None,
        }
    }
}

/// The current state of the pipeline.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "errored")]
    Errored,
    #[serde(rename = "setup-pending")]
    SetupPending,
    #[serde(rename = "setup")]
    Setup,
    #[serde(rename = "pending")]
    Pending,
}

impl Default for State {
    fn default() -> State {
        Self::Created
    }
}

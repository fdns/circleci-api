/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

/// JobDetails : Job Details

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobDetails {
    /// URL of the job in CircleCI Web UI.
    #[serde(rename = "web_url")]
    pub web_url: String,
    #[serde(rename = "project")]
    pub project: Box<crate::models::JobDetailsProject>,
    /// Info about parallels runs and their status.
    #[serde(rename = "parallel_runs")]
    pub parallel_runs: Vec<crate::models::JobDetailsParallelRunsInner>,
    /// The date and time the job started.
    #[serde(rename = "started_at")]
    pub started_at: String,
    #[serde(rename = "latest_workflow")]
    pub latest_workflow: Box<crate::models::JobDetailsLatestWorkflow>,
    /// The name of the job.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "executor")]
    pub executor: Box<crate::models::JobDetailsExecutor>,
    /// A number of parallel runs the job has.
    #[serde(rename = "parallelism")]
    pub parallelism: i64,
    /// The current status of the job.
    #[serde(rename = "status")]
    pub status: Status,
    /// The number of the job.
    #[serde(rename = "number")]
    pub number: i64,
    #[serde(rename = "pipeline")]
    pub pipeline: Box<crate::models::JobDetailsPipeline>,
    /// Duration of a job in milliseconds.
    #[serde(rename = "duration", deserialize_with = "Option::deserialize")]
    pub duration: Option<i64>,
    /// The time when the job was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Messages from CircleCI execution platform.
    #[serde(rename = "messages")]
    pub messages: Vec<crate::models::JobDetailsMessagesInner>,
    /// List of contexts used by the job.
    #[serde(rename = "contexts")]
    pub contexts: Vec<crate::models::JobDetailsContextsInner>,
    #[serde(rename = "organization")]
    pub organization: Box<crate::models::JobDetailsOrganization>,
    /// The time when the job was placed in a queue.
    #[serde(rename = "queued_at")]
    pub queued_at: String,
    /// The time when the job stopped.
    #[serde(
        rename = "stopped_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub stopped_at: Option<Option<String>>,
}

impl JobDetails {
    /// Job Details
    pub fn new(
        web_url: String,
        project: crate::models::JobDetailsProject,
        parallel_runs: Vec<crate::models::JobDetailsParallelRunsInner>,
        started_at: String,
        latest_workflow: crate::models::JobDetailsLatestWorkflow,
        name: String,
        executor: crate::models::JobDetailsExecutor,
        parallelism: i64,
        status: Status,
        number: i64,
        pipeline: crate::models::JobDetailsPipeline,
        duration: Option<i64>,
        created_at: String,
        messages: Vec<crate::models::JobDetailsMessagesInner>,
        contexts: Vec<crate::models::JobDetailsContextsInner>,
        organization: crate::models::JobDetailsOrganization,
        queued_at: String,
    ) -> JobDetails {
        JobDetails {
            web_url,
            project: Box::new(project),
            parallel_runs,
            started_at,
            latest_workflow: Box::new(latest_workflow),
            name,
            executor: Box::new(executor),
            parallelism,
            status,
            number,
            pipeline: Box::new(pipeline),
            duration,
            created_at,
            messages,
            contexts,
            organization: Box::new(organization),
            queued_at,
            stopped_at: None,
        }
    }
}

/// The current status of the job.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "not_run")]
    NotRun,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "retried")]
    Retried,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "not_running")]
    NotRunning,
    #[serde(rename = "infrastructure_fail")]
    InfrastructureFail,
    #[serde(rename = "timedout")]
    Timedout,
    #[serde(rename = "on_hold")]
    OnHold,
    #[serde(rename = "terminated-unknown")]
    TerminatedUnknown,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "unauthorized")]
    Unauthorized,
}

impl Default for Status {
    fn default() -> Status {
        Self::Success
    }
}

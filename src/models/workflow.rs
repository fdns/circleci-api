/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

/// Workflow : A workflow

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Workflow {
    /// The ID of the pipeline this workflow belongs to.
    #[serde(rename = "pipeline_id")]
    pub pipeline_id: uuid::Uuid,
    #[serde(rename = "canceled_by", skip_serializing_if = "Option::is_none")]
    pub canceled_by: Option<uuid::Uuid>,
    /// The unique ID of the workflow.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// The name of the workflow.
    #[serde(rename = "name")]
    pub name: String,
    /// The project-slug for the pipeline this workflow belongs to.
    #[serde(rename = "project_slug")]
    pub project_slug: String,
    #[serde(rename = "errored_by", skip_serializing_if = "Option::is_none")]
    pub errored_by: Option<uuid::Uuid>,
    /// Tag used for the workflow
    #[serde(
        rename = "tag",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tag: Option<Option<Tag>>,
    /// The current status of the workflow.
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "started_by")]
    pub started_by: uuid::Uuid,
    /// The number of the pipeline this workflow belongs to.
    #[serde(rename = "pipeline_number")]
    pub pipeline_number: i64,
    /// The date and time the workflow was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The date and time the workflow stopped.
    #[serde(rename = "stopped_at", deserialize_with = "Option::deserialize")]
    pub stopped_at: Option<String>,
}

impl Workflow {
    /// A workflow
    pub fn new(
        pipeline_id: uuid::Uuid,
        id: uuid::Uuid,
        name: String,
        project_slug: String,
        status: Status,
        started_by: uuid::Uuid,
        pipeline_number: i64,
        created_at: String,
        stopped_at: Option<String>,
    ) -> Workflow {
        Workflow {
            pipeline_id,
            canceled_by: None,
            id,
            name,
            project_slug,
            errored_by: None,
            tag: None,
            status,
            started_by,
            pipeline_number,
            created_at,
            stopped_at,
        }
    }
}

/// Tag used for the workflow
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tag {
    #[serde(rename = "setup")]
    Setup,
}

impl Default for Tag {
    fn default() -> Tag {
        Self::Setup
    }
}
/// The current status of the workflow.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "not_run")]
    NotRun,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "failing")]
    Failing,
    #[serde(rename = "on_hold")]
    OnHold,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "unauthorized")]
    Unauthorized,
}

impl Default for Status {
    fn default() -> Status {
        Self::Success
    }
}

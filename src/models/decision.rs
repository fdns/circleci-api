/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Decision {
    #[serde(rename = "enabled_rules", skip_serializing_if = "Option::is_none")]
    pub enabled_rules: Option<Vec<String>>,
    #[serde(rename = "hard_failures", skip_serializing_if = "Option::is_none")]
    pub hard_failures: Option<Vec<crate::models::Violation>>,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(rename = "soft_failures", skip_serializing_if = "Option::is_none")]
    pub soft_failures: Option<Vec<crate::models::Violation>>,
    #[serde(rename = "status")]
    pub status: String,
}

impl Decision {
    pub fn new(status: String) -> Decision {
        Decision {
            enabled_rules: None,
            hard_failures: None,
            reason: None,
            soft_failures: None,
            status,
        }
    }
}

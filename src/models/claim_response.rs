/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClaimResponse {
    #[serde(rename = "audience", skip_serializing_if = "Option::is_none")]
    pub audience: Option<Vec<String>>,
    #[serde(
        rename = "audience_updated_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub audience_updated_at: Option<String>,
    #[serde(rename = "org_id")]
    pub org_id: uuid::Uuid,
    #[serde(rename = "project_id", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<uuid::Uuid>,
    #[serde(rename = "ttl", skip_serializing_if = "Option::is_none")]
    pub ttl: Option<String>,
    #[serde(rename = "ttl_updated_at", skip_serializing_if = "Option::is_none")]
    pub ttl_updated_at: Option<String>,
}

impl ClaimResponse {
    pub fn new(org_id: uuid::Uuid) -> ClaimResponse {
        ClaimResponse {
            audience: None,
            audience_updated_at: None,
            org_id,
            project_id: None,
            ttl: None,
            ttl_updated_at: None,
        }
    }
}

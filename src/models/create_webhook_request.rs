/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

/// CreateWebhookRequest : The parameters for a create webhook request

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateWebhookRequest {
    /// Name of the webhook
    #[serde(rename = "name")]
    pub name: String,
    /// Events that will trigger the webhook
    #[serde(rename = "events")]
    pub events: Vec<Events>,
    /// URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
    #[serde(rename = "url")]
    pub url: String,
    /// Whether to enforce TLS certificate verification when delivering the webhook
    #[serde(rename = "verify-tls")]
    pub verify_tls: bool,
    /// Secret used to build an HMAC hash of the payload and passed as a header in the webhook request
    #[serde(rename = "signing-secret")]
    pub signing_secret: String,
    #[serde(rename = "scope")]
    pub scope: Box<crate::models::CreateWebhookRequestScope>,
}

impl CreateWebhookRequest {
    /// The parameters for a create webhook request
    pub fn new(
        name: String,
        events: Vec<Events>,
        url: String,
        verify_tls: bool,
        signing_secret: String,
        scope: crate::models::CreateWebhookRequestScope,
    ) -> CreateWebhookRequest {
        CreateWebhookRequest {
            name,
            events,
            url,
            verify_tls,
            signing_secret,
            scope: Box::new(scope),
        }
    }
}

/// Events that will trigger the webhook
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Events {
    #[serde(rename = "workflow-completed")]
    WorkflowCompleted,
    #[serde(rename = "job-completed")]
    JobCompleted,
}

impl Default for Events {
    fn default() -> Events {
        Self::WorkflowCompleted
    }
}

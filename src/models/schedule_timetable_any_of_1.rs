/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleTimetableAnyOf1 {
    /// Number of times a schedule triggers per hour, value must be between 1 and 60
    #[serde(rename = "per-hour")]
    pub per_hour: i32,
    /// Hours in a day in which the schedule triggers.
    #[serde(rename = "hours-of-day")]
    pub hours_of_day: Vec<i32>,
    /// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
    #[serde(rename = "days-of-month")]
    pub days_of_month: Vec<i32>,
    /// Days in a week in which the schedule triggers.
    #[serde(rename = "days-of-week", skip_serializing_if = "Option::is_none")]
    pub days_of_week: Option<Vec<DaysOfWeek>>,
    /// Months in which the schedule triggers.
    #[serde(rename = "months", skip_serializing_if = "Option::is_none")]
    pub months: Option<Vec<Months>>,
}

impl ScheduleTimetableAnyOf1 {
    pub fn new(
        per_hour: i32,
        hours_of_day: Vec<i32>,
        days_of_month: Vec<i32>,
    ) -> ScheduleTimetableAnyOf1 {
        ScheduleTimetableAnyOf1 {
            per_hour,
            hours_of_day,
            days_of_month,
            days_of_week: None,
            months: None,
        }
    }
}

/// Days in a week in which the schedule triggers.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DaysOfWeek {
    #[serde(rename = "TUE")]
    Tue,
    #[serde(rename = "SAT")]
    Sat,
    #[serde(rename = "SUN")]
    Sun,
    #[serde(rename = "MON")]
    Mon,
    #[serde(rename = "THU")]
    Thu,
    #[serde(rename = "WED")]
    Wed,
    #[serde(rename = "FRI")]
    Fri,
}

impl Default for DaysOfWeek {
    fn default() -> DaysOfWeek {
        Self::Tue
    }
}
/// Months in which the schedule triggers.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Months {
    #[serde(rename = "MAR")]
    Mar,
    #[serde(rename = "NOV")]
    Nov,
    #[serde(rename = "DEC")]
    Dec,
    #[serde(rename = "JUN")]
    Jun,
    #[serde(rename = "MAY")]
    May,
    #[serde(rename = "OCT")]
    Oct,
    #[serde(rename = "FEB")]
    Feb,
    #[serde(rename = "APR")]
    Apr,
    #[serde(rename = "SEP")]
    Sep,
    #[serde(rename = "AUG")]
    Aug,
    #[serde(rename = "JAN")]
    Jan,
    #[serde(rename = "JUL")]
    Jul,
}

impl Default for Months {
    fn default() -> Months {
        Self::Mar
    }
}

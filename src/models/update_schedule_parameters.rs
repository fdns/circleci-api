/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

/// UpdateScheduleParameters : The parameters for an update schedule request

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateScheduleParameters {
    /// Description of the schedule.
    #[serde(
        rename = "description",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<Option<String>>,
    /// Name of the schedule.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "timetable", skip_serializing_if = "Option::is_none")]
    pub timetable: Option<Box<crate::models::UpdateScheduleParametersTimetable>>,
    /// The attribution-actor of the scheduled pipeline.
    #[serde(rename = "attribution-actor", skip_serializing_if = "Option::is_none")]
    pub attribution_actor: Option<AttributionActor>,
    /// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<
        ::std::collections::HashMap<String, crate::models::ContinuePipelineRequestParametersValue>,
    >,
}

impl UpdateScheduleParameters {
    /// The parameters for an update schedule request
    pub fn new() -> UpdateScheduleParameters {
        UpdateScheduleParameters {
            description: None,
            name: None,
            timetable: None,
            attribution_actor: None,
            parameters: None,
        }
    }
}

/// The attribution-actor of the scheduled pipeline.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AttributionActor {
    #[serde(rename = "current")]
    Current,
    #[serde(rename = "system")]
    System,
}

impl Default for AttributionActor {
    fn default() -> AttributionActor {
        Self::Current
    }
}

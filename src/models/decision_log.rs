/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DecisionLog {
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "decision", skip_serializing_if = "Option::is_none")]
    pub decision: Option<Box<crate::models::Decision>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<crate::models::DecisionLogMetadata>>,
    /// policy-name-to-hash-map
    #[serde(rename = "policies", skip_serializing_if = "Option::is_none")]
    pub policies: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "time_taken_ms", skip_serializing_if = "Option::is_none")]
    pub time_taken_ms: Option<i32>,
}

impl DecisionLog {
    pub fn new() -> DecisionLog {
        DecisionLog {
            created_at: None,
            decision: None,
            id: None,
            metadata: None,
            policies: None,
            time_taken_ms: None,
        }
    }
}

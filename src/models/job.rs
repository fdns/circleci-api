/*
 * CircleCI API
 *
 * This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

/// Job : Job

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Job {
    /// The unique ID of the user.
    #[serde(rename = "canceled_by", skip_serializing_if = "Option::is_none")]
    pub canceled_by: Option<uuid::Uuid>,
    /// A sequence of the unique job IDs for the jobs that this job depends upon in the workflow.
    #[serde(rename = "dependencies")]
    pub dependencies: Vec<uuid::Uuid>,
    /// The number of the job.
    #[serde(rename = "job_number", skip_serializing_if = "Option::is_none")]
    pub job_number: Option<i64>,
    /// The unique ID of the job.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// The date and time the job started.
    #[serde(rename = "started_at")]
    pub started_at: String,
    /// The name of the job.
    #[serde(rename = "name")]
    pub name: String,
    /// The unique ID of the user.
    #[serde(rename = "approved_by", skip_serializing_if = "Option::is_none")]
    pub approved_by: Option<uuid::Uuid>,
    /// The project-slug for the job.
    #[serde(rename = "project_slug")]
    pub project_slug: String,
    /// The current status of the job.
    #[serde(rename = "status")]
    pub status: Status,
    /// The type of job.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The time when the job stopped.
    #[serde(
        rename = "stopped_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub stopped_at: Option<Option<String>>,
    /// The unique ID of the job.
    #[serde(
        rename = "approval_request_id",
        skip_serializing_if = "Option::is_none"
    )]
    pub approval_request_id: Option<uuid::Uuid>,
}

impl Job {
    /// Job
    pub fn new(
        dependencies: Vec<uuid::Uuid>,
        id: uuid::Uuid,
        started_at: String,
        name: String,
        project_slug: String,
        status: Status,
        r#type: Type,
    ) -> Job {
        Job {
            canceled_by: None,
            dependencies,
            job_number: None,
            id,
            started_at,
            name,
            approved_by: None,
            project_slug,
            status,
            r#type,
            stopped_at: None,
            approval_request_id: None,
        }
    }
}

/// The current status of the job.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "not_run")]
    NotRun,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "retried")]
    Retried,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "not_running")]
    NotRunning,
    #[serde(rename = "infrastructure_fail")]
    InfrastructureFail,
    #[serde(rename = "timedout")]
    Timedout,
    #[serde(rename = "on_hold")]
    OnHold,
    #[serde(rename = "terminated-unknown")]
    TerminatedUnknown,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "unauthorized")]
    Unauthorized,
}

impl Default for Status {
    fn default() -> Status {
        Self::Success
    }
}
/// The type of job.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "approval")]
    Approval,
}

impl Default for Type {
    fn default() -> Type {
        Self::Build
    }
}
